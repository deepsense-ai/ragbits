from typing import Any

from distilabel.steps.tasks import TextGeneration
from distilabel.steps import Step, StepInput

from ragbits.core.prompt.base import ChatFormat
from ragbits.evaluate.dataset_generator.prompt_query_gen import QueryGenPrompt, QueryGenInput

class QueryGenTask(TextGeneration):
    """
    A task for generating a question based on a provided text chunk.
    """

    @property
    def inputs(self) -> list[str]:
        """Defines the input fields required for this task."""
        return ["chunk"]

    def format_input(self, input: dict[str, Any]) -> ChatFormat:
        """
        Formats the input data for generating a question based on the provided "chunk".

        Args:
            input: A dictionary containing a single "chunk" key with the text input.

        Returns:
            The formatted chat object containing the input for query generation.
        """
        chat = QueryGenPrompt(QueryGenInput(chunk=input["chunk"])).chat
        return chat

    @property
    def outputs(self) -> list[str]:
        """Defines the output fields generated by this task."""
        return ["question", "chunk"]

    def format_output(
        self, output: str, input: dict[str, Any] | None = None
    ) -> dict[str, str]:
        """
        Formats the generated question into a structured dictionary with the original "chunk" input.

        Args:
            output: The generated question.
            input: Optional; contains "chunk" key with the original input chunk.

        Returns:
            A dictionary containing "chunk" and "question".
        """
        return {"chunk": input["chunk"], "question": output}
