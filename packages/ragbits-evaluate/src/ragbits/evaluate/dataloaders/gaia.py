from collections.abc import Iterable

from ragbits.core.sources.base import Source
from ragbits.evaluate.dataloaders.base import DataLoader
from ragbits.evaluate.pipelines.gaia import GaiaData


class GaiaDataLoader(DataLoader[GaiaData]):
    """
    GAIA benchmark evaluation data loader.

    The source should point to a local/remote JSON or JSONL file exported from the
    Hugging Face dataset `gaia-benchmark/GAIA`. Rows are expected to contain at least:
    - "task_id" (str)
    - "Question" (str)
    - "Level" (int)
    - "Final answer" (str)
    """

    def __init__(
        self,
        source: Source,
        *,
        split: str = "data",
        task_id_key: str = "task_id",
        question_key: str = "Question",
        level_key: str = "Level",
        final_answer_key: str = "Final answer",
        file_name_key: str = "file_name",
        skip_file_attachments: bool = False,
    ) -> None:
        """
        Initialize the GAIA data loader.

        Args:
            source: The source to load the data from.
            split: The split to load the data from (file name generated by the source helper).
            task_id_key: Column name for GAIA task identifier.
            question_key: Column name for the natural language question.
            level_key: Column name for numeric difficulty level (1, 2, 3).
            final_answer_key: Column name for the final ground-truth answer.
            file_name_key: Column name with optional associated file name (may be empty).
            skip_file_attachments: If True, skip rows that have a non-empty file attachment.
        """
        required = {task_id_key, question_key, level_key, final_answer_key}
        super().__init__(source=source, split=split, required_keys=required)
        self.task_id_key = task_id_key
        self.question_key = question_key
        self.level_key = level_key
        self.final_answer_key = final_answer_key
        self.file_name_key = file_name_key
        self.skip_file_attachments = skip_file_attachments

    async def map(self, dataset: Iterable[dict]) -> Iterable[GaiaData]:
        """
        Map the dataset to the GAIA evaluation data schema.

        Args:
            dataset: The dataset to map.

        Returns:
            The GAIA evaluation data rows.
        """
        return [
            GaiaData(
                task_id=str(row.get(self.task_id_key, "")),
                question=str(row.get(self.question_key, "")),
                level=int(row.get(self.level_key, 1)),
                reference_answer=str(row.get(self.final_answer_key, "")),
                file_name=(row.get(self.file_name_key) or None),
            )
            for row in dataset
            if (not self.skip_file_attachments or not row.get(self.file_name_key) or str(row.get(self.file_name_key)).strip() == "")
        ]
