from typing import Any

from distilabel.steps.tasks import TextGeneration
from ragbits.core.prompt.base import ChatFormat

from ragbits.evaluate.dataset_generator.prompt_basic_answer_gen import BasicAnswerGenPrompt, BasicAnswerGenInput

class AnswerGenTask(TextGeneration):
    """
    A task for generating basic answers to questions based on a provided text chunk. This class extends
    the `TextGeneration` task from the `distilabel` package.
    """

    @property
    def inputs(self) -> list[str]:
        """Defines the input fields required for this task."""
        return ["chunk", "question"]

    def format_input(self, input: dict[str, Any]) -> ChatFormat:
        """
        Formats the input data for the text generation model by creating a `ChatFormat` object.

        Args:
            input: A dictionary containing "chunk" (text source) and "question" keys.

        Returns:
            The formatted chat object containing the inputs for text generation.
        """
        chat = BasicAnswerGenPrompt(BasicAnswerGenInput(chunk=input["chunk"], question=input["question"])).chat
        return chat

    @property
    def outputs(self) -> list[str]:
        """Defines the output fields generated by this task."""
        return ["basic_answer"]

    def format_output(
        self, output: str, input: dict[str, Any] | None = None
    ) -> dict[str, str]:
        """
        Formats the model's output into a structured dictionary with the "basic_answer" key.

        Args:
            output: The raw output generated by the text generation model.
            input: Optional; not typically used in this formatting.

        Returns:
            A dictionary with "basic_answer" as the key and the generated output as its value.
        """
        return {"basic_answer": output}
