name: Nightly Build

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:      # Manual trigger for testing

jobs:
  check-for-changes:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      commit-hash: ${{ steps.check.outputs.commit-hash }}
      nightly-version: ${{ steps.check.outputs.nightly-version }}
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      - name: Check if nightly build needed
        id: check
        run: |
          # Get the latest commit hash on develop
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "commit-hash=$COMMIT_HASH" >> "$GITHUB_OUTPUT"

          # Check if we already built this commit as nightly
          LAST_NIGHTLY_TAG=$(git tag -l "*dev*" --sort=-version:refname | head -1)
          if [ -n "$LAST_NIGHTLY_TAG" ]; then
            LAST_NIGHTLY_COMMIT=$(git rev-list -n 1 $LAST_NIGHTLY_TAG | cut -c1-7)
            if [ "$COMMIT_HASH" = "$LAST_NIGHTLY_COMMIT" ]; then
              echo "should-build=false" >> "$GITHUB_OUTPUT"
              echo "No new commits since last nightly build"
              exit 0
            fi
          fi

          # Generate nightly version
          BASE_VERSION=$(python -c "
          try:
              import tomllib
          except ImportError:
              import tomli as tomllib
          with open('packages/ragbits/pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          print(data['project']['version'])
          ")
          DATE=$(date +%Y%m%d)
          NIGHTLY_VERSION="${BASE_VERSION}.dev${DATE}${COMMIT_HASH}"

          echo "should-build=true" >> "$GITHUB_OUTPUT"
          echo "nightly-version=$NIGHTLY_VERSION" >> "$GITHUB_OUTPUT"
          echo "Will build nightly version: $NIGHTLY_VERSION"

  build-and-publish:
    needs: check-for-changes
    if: needs.check-for-changes.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: ${{ vars.UV_VERSION || '0.6.9' }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Update package versions for nightly
        run: |
          uv run scripts/update_nightly_versions.py "${{ needs.check-for-changes.outputs.nightly-version }}"

      - name: Install dependencies and run tests
        run: |
          uv sync --all-extras
          uv run pytest --maxfail=5 -x

      - name: Build packages
        run: |
          for dir in packages/*/; do
            echo "Building $dir"
            uv build "$dir" --out-dir dist
          done

      - name: Publish to PyPI
        run: |
          uv tool run twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_REPOSITORY_URL: https://test.pypi.org/simple/
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Deploy nightly documentation
        shell: bash
        run: uv run ./.github/scripts/deploy_docs.sh nightly
        env:
          GCP_KEY: ${{ secrets.GCP_KEY }}

      - name: Create git tag for nightly
        run: |
          git config user.name "ds-ragbits-robot"
          git config user.email "ds-ragbits-robot@users.noreply.github.com"
          git tag "${{ needs.check-for-changes.outputs.nightly-version }}"
          git push origin "${{ needs.check-for-changes.outputs.nightly-version }}"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Clean up old nightly releases
        run: |
          # Keep only last 30 nightly tags
          git tag -l "*dev*" --sort=-version:refname | tail -n +31 | xargs -r git tag -d
          git tag -l "*dev*" --sort=-version:refname | tail -n +31 | xargs -r -I {} git push origin :refs/tags/{}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Notify on failure
        if: failure()
        run: |
          echo "Nightly build failed for commit ${{ needs.check-for-changes.outputs.commit-hash }}"
          echo "Version attempted: ${{ needs.check-for-changes.outputs.nightly-version }}"
