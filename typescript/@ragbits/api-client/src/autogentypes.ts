/**
 * Auto-generated TypeScript interfaces from Python Pydantic models
 * Generated by scripts/generate_typescript_from_json_schema.py
 * DO NOT EDIT MANUALLY
 */

import type { RJSFSchema } from '@rjsf/utils';

export type ChatResponseType =
  | "text"
  | "reference"
  | "state_update"
  | "message_id"
  | "conversation_id"
  | "live_update"
  | "followup_messages";

export type FeedbackType = "like" | "dislike";

export type LiveUpdateType = "START" | "FINISH";

export type MessageRole = "user" | "assistant" | "system";

export interface ChatContext {
  conversation_id?: string | null;
  message_id?: string | null;
  state?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}

export interface ChatRequest {
  /**
   * The current user message
   */
  message: string;
  /**
   * Previous message history
   */
  history?: Message[];
  /**
   * User context information
   */
  context?: {
    [k: string]: unknown;
  };
}

export interface ConfigResponse {
  feedback: FeedbackConfig;
  /**
   * UI customization
   */
  customization?: UICustomization | null;
  user_settings: UserSettings;
  /**
   * Debug mode flag
   */
  debug_mode?: boolean;
}

export interface FeedbackConfig {
  /**
   * Whether like feedback is enabled
   */
  like_enabled?: boolean;
  /**
   * The form to use for like feedback. Use Pydantic models to define form objects, that would get converted to JSONSchema and rendered in the UI.
   */
  like_form?: RJSFSchema | null;
  /**
   * Whether dislike feedback is enabled
   */
  dislike_enabled?: boolean;
  /**
   * The form to use for dislike feedback. Use Pydantic models to define form objects, that would get converted to JSONSchema and rendered in the UI.
   */
  dislike_form?: RJSFSchema | null;
}

export interface FeedbackRequest {
  /**
   * ID of the message receiving feedback
   */
  message_id: string;
  /**
   * Type of feedback (like or dislike)
   */
  feedback: "like" | "dislike";
  /**
   * Additional feedback details
   */
  payload?: {
    [k: string]: unknown;
  };
}

export interface FeedbackResponse {
  /**
   * Status of the feedback submission
   */
  status: string;
}

export interface HeaderCustomization {
  /**
   * Custom title to be displayed instead of 'Ragbits Chat'
   */
  title?: string | null;
  /**
   * Custom subtitle to be displayed instead of 'by deepsense.ai'
   */
  subtitle?: string | null;
  /**
   * Custom logo URL or content. The logo can also be served from 'static' directory inside 'ui-buid'
   */
  logo?: string | null;
}

export interface LiveUpdate {
  update_id: string;
  type: LiveUpdateType;
  content: LiveUpdateContent;
}

export interface LiveUpdateContent {
  label: string;
  description: string | null;
}

export interface Message {
  role: MessageRole;
  content: string;
  /**
   * Optional message ID
   */
  id?: string | null;
}

export interface Reference {
  title: string;
  content: string;
  url?: string | null;
}

export interface ServerState {
  state: {
    [k: string]: unknown;
  };
  signature: string;
}

export interface UICustomization {
  /**
   * Custom header configuration
   */
  header?: HeaderCustomization | null;
  /**
   * Custom welcome message to be displayed on the UI. It supports Markdown.
   */
  welcome_message?: string | null;
}

export interface UserSettings {
  /**
   * The form to use for chat options. Use Pydantic models to define form objects, that would get converted to JSONSchema and rendered in the UI.
   */
  form?: RJSFSchema | null;
}

/**
 * Specific chat response types
 */
interface TextChatResponse {
    type: 'text'
    content: string
}

interface ReferenceChatResponse {
    type: 'reference'
    content: Reference
}

interface MessageIdChatResponse {
    type: 'message_id'
    content: string
}

interface ConversationIdChatResponse {
    type: 'conversation_id'
    content: string
}

interface StateUpdateChatResponse {
    type: 'state_update'
    content: ServerState
}

interface LiveUpdateChatResponse {
    type: 'live_update'
    content: LiveUpdate
}

interface FollowupMessagesChatResponse {
    type: 'followup_messages'
    content: string[]
}

/**
 * Typed chat response union
 */
export type ChatResponse =
    | TextChatResponse
    | ReferenceChatResponse
    | MessageIdChatResponse
    | ConversationIdChatResponse
    | StateUpdateChatResponse
    | LiveUpdateChatResponse
    | FollowupMessagesChatResponse
