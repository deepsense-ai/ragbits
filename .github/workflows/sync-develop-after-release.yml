name: Sync Develop After Release

on:
  push:
    branches:
      - main

jobs:
  check-if-release:
    runs-on: ubuntu-latest
    outputs:
      is-release: ${{ steps.check.outputs.is-release }}
      release-version: ${{ steps.check.outputs.release-version }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if this is a release commit
        id: check
        run: |
          # Check if the latest commit message indicates a release
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")

          if [[ "$COMMIT_MESSAGE" =~ ^release\(.+\):.*v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "is-release=true" >> "$GITHUB_OUTPUT"
            RELEASE_VERSION=$(echo "$COMMIT_MESSAGE" | sed -n 's/.*v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p')
            echo "release-version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
            echo "Detected release commit with version: $RELEASE_VERSION"
          else
            echo "is-release=false" >> "$GITHUB_OUTPUT"
            echo "Not a release commit"
          fi

  sync-develop:
    needs: check-if-release
    if: needs.check-if-release.outputs.is-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: ${{ vars.UV_VERSION || '0.6.9' }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Configure Git
        run: |
          git config user.name "ds-ragbits-robot"
          git config user.email "ds-ragbits-robot@users.noreply.github.com"

      - name: Switch to develop and update versions
        run: |
          # Switch to develop branch
          git checkout develop
          git pull origin develop

          # Calculate next development version
          RELEASE_VERSION="${{ needs.check-if-release.outputs.release-version }}"
          IFS='.' read -ra VERSION_PARTS <<< "$RELEASE_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment minor version for next development cycle
          NEXT_MINOR=$((MINOR + 1))
          NEXT_DEV_VERSION="$MAJOR.$NEXT_MINOR.0"

          echo "Updating develop to base version: $NEXT_DEV_VERSION"

          # Update all package versions to next development version
          uv run scripts/update_develop_versions.py "$NEXT_DEV_VERSION"

          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "chore: bump develop base version to $NEXT_DEV_VERSION"
            git push origin develop
            echo "Successfully updated develop branch to version $NEXT_DEV_VERSION"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
